/**
 * This class is generated by jOOQ
 */
package uk.co.techblue.cgh.dnap.tables;

/**
 * This class is generated by jOOQ.
 */
@java.lang.SuppressWarnings({ "all", "unchecked" })
public class Signalreference extends org.jooq.impl.TableImpl<uk.co.techblue.cgh.dnap.tables.records.SignalreferenceRecord> {

	private static final long serialVersionUID = -352800729;

	/**
	 * The singleton instance of <code>cgh-processor.signalreference</code>
	 */
	public static final uk.co.techblue.cgh.dnap.tables.Signalreference SIGNALREFERENCE = new uk.co.techblue.cgh.dnap.tables.Signalreference();

	/**
	 * The class holding records for this type
	 */
	@Override
	public java.lang.Class<uk.co.techblue.cgh.dnap.tables.records.SignalreferenceRecord> getRecordType() {
		return uk.co.techblue.cgh.dnap.tables.records.SignalreferenceRecord.class;
	}

	/**
	 * The column <code>cgh-processor.signalreference.SignalId</code>. 
	 */
	public final org.jooq.TableField<uk.co.techblue.cgh.dnap.tables.records.SignalreferenceRecord, java.lang.Long> SIGNALID = createField("SignalId", org.jooq.impl.SQLDataType.BIGINT, this);

	/**
	 * The column <code>cgh-processor.signalreference.ProbeName</code>. 
	 */
	public final org.jooq.TableField<uk.co.techblue.cgh.dnap.tables.records.SignalreferenceRecord, java.lang.String> PROBENAME = createField("ProbeName", org.jooq.impl.SQLDataType.VARCHAR.length(30), this);

	/**
	 * The column <code>cgh-processor.signalreference.SystematicName</code>. 
	 */
	public final org.jooq.TableField<uk.co.techblue.cgh.dnap.tables.records.SignalreferenceRecord, java.lang.String> SYSTEMATICNAME = createField("SystematicName", org.jooq.impl.SQLDataType.VARCHAR.length(50), this);

	/**
	 * The column <code>cgh-processor.signalreference.LogRatio</code>. 
	 */
	public final org.jooq.TableField<uk.co.techblue.cgh.dnap.tables.records.SignalreferenceRecord, java.lang.Double> LOGRATIO = createField("LogRatio", org.jooq.impl.SQLDataType.DOUBLE, this);

	/**
	 * The column <code>cgh-processor.signalreference.gProcessedSignal</code>. 
	 */
	public final org.jooq.TableField<uk.co.techblue.cgh.dnap.tables.records.SignalreferenceRecord, java.lang.Double> GPROCESSEDSIGNAL = createField("gProcessedSignal", org.jooq.impl.SQLDataType.DOUBLE, this);

	/**
	 * The column <code>cgh-processor.signalreference.rProcessedSignal</code>. 
	 */
	public final org.jooq.TableField<uk.co.techblue.cgh.dnap.tables.records.SignalreferenceRecord, java.lang.Double> RPROCESSEDSIGNAL = createField("rProcessedSignal", org.jooq.impl.SQLDataType.DOUBLE, this);

	/**
	 * The column <code>cgh-processor.signalreference.gIsSaturated</code>. 
	 */
	public final org.jooq.TableField<uk.co.techblue.cgh.dnap.tables.records.SignalreferenceRecord, java.lang.Boolean> GISSATURATED = createField("gIsSaturated", org.jooq.impl.SQLDataType.BOOLEAN, this);

	/**
	 * The column <code>cgh-processor.signalreference.rIsSaturated</code>. 
	 */
	public final org.jooq.TableField<uk.co.techblue.cgh.dnap.tables.records.SignalreferenceRecord, java.lang.Boolean> RISSATURATED = createField("rIsSaturated", org.jooq.impl.SQLDataType.BOOLEAN, this);

	/**
	 * The column <code>cgh-processor.signalreference.gIsFeatNonUnifOL</code>. 
	 */
	public final org.jooq.TableField<uk.co.techblue.cgh.dnap.tables.records.SignalreferenceRecord, java.lang.Boolean> GISFEATNONUNIFOL = createField("gIsFeatNonUnifOL", org.jooq.impl.SQLDataType.BOOLEAN, this);

	/**
	 * The column <code>cgh-processor.signalreference.rIsFeatNonUnifOL</code>. 
	 */
	public final org.jooq.TableField<uk.co.techblue.cgh.dnap.tables.records.SignalreferenceRecord, java.lang.Boolean> RISFEATNONUNIFOL = createField("rIsFeatNonUnifOL", org.jooq.impl.SQLDataType.BOOLEAN, this);

	/**
	 * The column <code>cgh-processor.signalreference.gIsBGNonUnifOL</code>. 
	 */
	public final org.jooq.TableField<uk.co.techblue.cgh.dnap.tables.records.SignalreferenceRecord, java.lang.Boolean> GISBGNONUNIFOL = createField("gIsBGNonUnifOL", org.jooq.impl.SQLDataType.BOOLEAN, this);

	/**
	 * The column <code>cgh-processor.signalreference.rIsBGNonUnifOL</code>. 
	 */
	public final org.jooq.TableField<uk.co.techblue.cgh.dnap.tables.records.SignalreferenceRecord, java.lang.Boolean> RISBGNONUNIFOL = createField("rIsBGNonUnifOL", org.jooq.impl.SQLDataType.BOOLEAN, this);

	/**
	 * The column <code>cgh-processor.signalreference.Chromosome</code>. 
	 */
	public final org.jooq.TableField<uk.co.techblue.cgh.dnap.tables.records.SignalreferenceRecord, java.lang.String> CHROMOSOME = createField("Chromosome", org.jooq.impl.SQLDataType.VARCHAR.length(10), this);

	/**
	 * The column <code>cgh-processor.signalreference.StartPosition</code>. 
	 */
	public final org.jooq.TableField<uk.co.techblue.cgh.dnap.tables.records.SignalreferenceRecord, java.lang.Long> STARTPOSITION = createField("StartPosition", org.jooq.impl.SQLDataType.BIGINT, this);

	/**
	 * The column <code>cgh-processor.signalreference.StopPosition</code>. 
	 */
	public final org.jooq.TableField<uk.co.techblue.cgh.dnap.tables.records.SignalreferenceRecord, java.lang.Long> STOPPOSITION = createField("StopPosition", org.jooq.impl.SQLDataType.BIGINT, this);

	/**
	 * The column <code>cgh-processor.signalreference.gIsWellAboveBG</code>. 
	 */
	public final org.jooq.TableField<uk.co.techblue.cgh.dnap.tables.records.SignalreferenceRecord, java.lang.Byte> GISWELLABOVEBG = createField("gIsWellAboveBG", org.jooq.impl.SQLDataType.TINYINT, this);

	/**
	 * The column <code>cgh-processor.signalreference.rIsWellAboveBG</code>. 
	 */
	public final org.jooq.TableField<uk.co.techblue.cgh.dnap.tables.records.SignalreferenceRecord, java.lang.Byte> RISWELLABOVEBG = createField("rIsWellAboveBG", org.jooq.impl.SQLDataType.TINYINT, this);

	/**
	 * The column <code>cgh-processor.signalreference.ArrayId</code>. 
	 */
	public final org.jooq.TableField<uk.co.techblue.cgh.dnap.tables.records.SignalreferenceRecord, java.lang.Long> ARRAYID = createField("ArrayId", org.jooq.impl.SQLDataType.BIGINT, this);

	/**
	 * Create a <code>cgh-processor.signalreference</code> table reference
	 */
	public Signalreference() {
		super("signalreference", uk.co.techblue.cgh.dnap.CghProcessor.CGH_PROCESSOR);
	}

	/**
	 * Create an aliased <code>cgh-processor.signalreference</code> table reference
	 */
	public Signalreference(java.lang.String alias) {
		super(alias, uk.co.techblue.cgh.dnap.CghProcessor.CGH_PROCESSOR, uk.co.techblue.cgh.dnap.tables.Signalreference.SIGNALREFERENCE);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Identity<uk.co.techblue.cgh.dnap.tables.records.SignalreferenceRecord, java.lang.Long> getIdentity() {
		return uk.co.techblue.cgh.dnap.Keys.IDENTITY_SIGNALREFERENCE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.UniqueKey<uk.co.techblue.cgh.dnap.tables.records.SignalreferenceRecord> getPrimaryKey() {
		return uk.co.techblue.cgh.dnap.Keys.KEY_SIGNALREFERENCE_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.util.List<org.jooq.UniqueKey<uk.co.techblue.cgh.dnap.tables.records.SignalreferenceRecord>> getKeys() {
		return java.util.Arrays.<org.jooq.UniqueKey<uk.co.techblue.cgh.dnap.tables.records.SignalreferenceRecord>>asList(uk.co.techblue.cgh.dnap.Keys.KEY_SIGNALREFERENCE_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public uk.co.techblue.cgh.dnap.tables.Signalreference as(java.lang.String alias) {
		return new uk.co.techblue.cgh.dnap.tables.Signalreference(alias);
	}
}
